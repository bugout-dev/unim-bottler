# Code generated by moonworm : https://github.com/bugout-dev/moonworm
# Moonworm version : 0.1.14

import argparse
import json
import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from brownie import Contract, network, project
from brownie.network.contract import ContractContainer
from eth_typing.evm import ChecksumAddress


PROJECT_DIRECTORY = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
BUILD_DIRECTORY = os.path.join(PROJECT_DIRECTORY, "build", "contracts")


def boolean_argument_type(raw_value: str) -> bool:
    TRUE_VALUES = ["1", "t", "y", "true", "yes"]
    FALSE_VALUES = ["0", "f", "n", "false", "no"]

    if raw_value.lower() in TRUE_VALUES:
        return True
    elif raw_value.lower() in FALSE_VALUES:
        return False

    raise ValueError(
        f"Invalid boolean argument: {raw_value}. Value must be one of: {','.join(TRUE_VALUES + FALSE_VALUES)}"
    )


def bytes_argument_type(raw_value: str) -> bytes:
    return raw_value.encode()


def get_abi_json(abi_name: str) -> List[Dict[str, Any]]:
    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    abi_json = build.get("abi")
    if abi_json is None:
        raise ValueError(f"Could not find ABI definition in: {abi_full_path}")

    return abi_json


def contract_from_build(abi_name: str) -> ContractContainer:
    # This is workaround because brownie currently doesn't support loading the same project multiple
    # times. This causes problems when using multiple contracts from the same project in the same
    # python project.
    PROJECT = project.main.Project("moonworm", Path(PROJECT_DIRECTORY))

    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    return ContractContainer(PROJECT, build)


class BottlerFacet:
    def __init__(self, contract_address: Optional[ChecksumAddress]):
        self.contract_name = "BottlerFacet"
        self.address = contract_address
        self.contract = None
        self.abi = get_abi_json("BottlerFacet")
        if self.address is not None:
            self.contract: Optional[Contract] = Contract.from_abi(
                self.contract_name, self.address, self.abi
            )

    def deploy(self, transaction_config):
        contract_class = contract_from_build(self.contract_name)
        deployed_contract = contract_class.deploy(transaction_config)
        self.address = deployed_contract.address
        self.contract = deployed_contract

    def assert_contract_is_instantiated(self) -> None:
        if self.contract is None:
            raise Exception("contract has not been instantiated")

    def verify_contract(self):
        self.assert_contract_is_instantiated()
        contract_class = contract_from_build(self.contract_name)
        contract_class.publish_source(self.contract)

    def add_terminus_pools(
        self,
        full_bottle_pool_ids: List,
        empty_bottle_pool_ids: List,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.addTerminusPools(
            full_bottle_pool_ids, empty_bottle_pool_ids, transaction_config
        )

    def bottler_controller(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.bottlerController.call()

    def drain_erc20(self, token_address: ChecksumAddress, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.drainERC20(token_address, transaction_config)

    def empty_bottles(
        self, pool_index: int, bottles_count: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.emptyBottles(pool_index, bottles_count, transaction_config)

    def fill_bottles(
        self, pool_index: int, bottles_count: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.fillBottles(pool_index, bottles_count, transaction_config)

    def fill_empty_bottles(
        self, pool_index: int, bottles_count: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.fillEmptyBottles(
            pool_index, bottles_count, transaction_config
        )

    def get_bottle_capacities(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getBottleCapacities.call()

    def get_empty_bottle_inventory(self, owner: ChecksumAddress) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getEmptyBottleInventory.call(owner)

    def get_empty_bottle_pool_ids(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getEmptyBottlePoolIds.call()

    def get_empty_bottle_supplies(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getEmptyBottleSupplies.call()

    def get_full_bottle_inventory(self, owner: ChecksumAddress) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getFullBottleInventory.call(owner)

    def get_full_bottle_pool_ids(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getFullBottlePoolIds.call()

    def get_full_bottle_prices(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getFullBottlePrices.call()

    def get_full_bottle_supplies(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getFullBottleSupplies.call()

    def get_terminus_address(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getTerminusAddress.call()

    def get_unim_address(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getUnimAddress.call()

    def get_volume_by_index(self, index: int) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getVolumeByIndex.call(index)

    def on_erc1155_batch_received(
        self,
        arg1: ChecksumAddress,
        arg2: ChecksumAddress,
        arg3: List,
        arg4: List,
        arg5: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.onERC1155BatchReceived(
            arg1, arg2, arg3, arg4, arg5, transaction_config
        )

    def on_erc1155_received(
        self,
        arg1: ChecksumAddress,
        arg2: ChecksumAddress,
        arg3: int,
        arg4: int,
        arg5: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.onERC1155Received(
            arg1, arg2, arg3, arg4, arg5, transaction_config
        )

    def set_bottle_capacities(
        self, new_bottle_capacities: List, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setBottleCapacities(
            new_bottle_capacities, transaction_config
        )

    def set_empty_bottle_pool_ids(
        self, new_empty_bottle_pool_ids: List, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setEmptyBottlePoolIds(
            new_empty_bottle_pool_ids, transaction_config
        )

    def set_full_bottle_pool_ids(
        self, new_full_bottle_pool_ids: List, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setFullBottlePoolIds(
            new_full_bottle_pool_ids, transaction_config
        )

    def set_full_bottle_prices(self, prices: List, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setFullBottlePrices(prices, transaction_config)

    def set_up(
        self,
        _unim_address: ChecksumAddress,
        _terminus_address: ChecksumAddress,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setUp(_unim_address, _terminus_address, transaction_config)

    def supports_interface(self, interface_id: bytes) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.supportsInterface.call(interface_id)

    def surrender_terminus_pools(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.surrenderTerminusPools(transaction_config)

    def withdraw_erc20(
        self, token_address: ChecksumAddress, amount: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.withdrawERC20(token_address, amount, transaction_config)


def get_transaction_config(args: argparse.Namespace) -> Dict[str, Any]:
    signer = network.accounts.load(args.sender, args.password)
    transaction_config: Dict[str, Any] = {"from": signer}
    if args.gas_price is not None:
        transaction_config["gas_price"] = args.gas_price
    if args.max_fee_per_gas is not None:
        transaction_config["max_fee"] = args.max_fee_per_gas
    if args.max_priority_fee_per_gas is not None:
        transaction_config["priority_fee"] = args.max_priority_fee_per_gas
    if args.confirmations is not None:
        transaction_config["required_confs"] = args.confirmations
    if args.nonce is not None:
        transaction_config["nonce"] = args.nonce
    return transaction_config


def add_default_arguments(parser: argparse.ArgumentParser, transact: bool) -> None:
    parser.add_argument(
        "--network", required=True, help="Name of brownie network to connect to"
    )
    parser.add_argument(
        "--address", required=False, help="Address of deployed contract to connect to"
    )
    if not transact:
        return
    parser.add_argument(
        "--sender", required=True, help="Path to keystore file for transaction sender"
    )
    parser.add_argument(
        "--password",
        required=False,
        help="Password to keystore file (if you do not provide it, you will be prompted for it)",
    )
    parser.add_argument(
        "--gas-price", default=None, help="Gas price at which to submit transaction"
    )
    parser.add_argument(
        "--max-fee-per-gas",
        default=None,
        help="Max fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--max-priority-fee-per-gas",
        default=None,
        help="Max priority fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--confirmations",
        type=int,
        default=None,
        help="Number of confirmations to await before considering a transaction completed",
    )
    parser.add_argument(
        "--nonce", type=int, default=None, help="Nonce for the transaction (optional)"
    )


def handle_deploy(args: argparse.Namespace) -> None:
    network.connect(args.network)
    transaction_config = get_transaction_config(args)
    contract = BottlerFacet(None)
    result = contract.deploy(transaction_config=transaction_config)
    print(result)


def handle_verify_contract(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    result = contract.verify_contract()
    print(result)


def handle_add_terminus_pools(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.add_terminus_pools(
        full_bottle_pool_ids=args.full_bottle_pool_ids,
        empty_bottle_pool_ids=args.empty_bottle_pool_ids,
        transaction_config=transaction_config,
    )
    print(result)


def handle_bottler_controller(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    result = contract.bottler_controller()
    print(result)


def handle_drain_erc20(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.drain_erc20(
        token_address=args.token_address, transaction_config=transaction_config
    )
    print(result)


def handle_empty_bottles(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.empty_bottles(
        pool_index=args.pool_index,
        bottles_count=args.bottles_count,
        transaction_config=transaction_config,
    )
    print(result)


def handle_fill_bottles(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.fill_bottles(
        pool_index=args.pool_index,
        bottles_count=args.bottles_count,
        transaction_config=transaction_config,
    )
    print(result)


def handle_fill_empty_bottles(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.fill_empty_bottles(
        pool_index=args.pool_index,
        bottles_count=args.bottles_count,
        transaction_config=transaction_config,
    )
    print(result)


def handle_get_bottle_capacities(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    result = contract.get_bottle_capacities()
    print(result)


def handle_get_empty_bottle_inventory(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    result = contract.get_empty_bottle_inventory(owner=args.owner)
    print(result)


def handle_get_empty_bottle_pool_ids(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    result = contract.get_empty_bottle_pool_ids()
    print(result)


def handle_get_empty_bottle_supplies(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    result = contract.get_empty_bottle_supplies()
    print(result)


def handle_get_full_bottle_inventory(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    result = contract.get_full_bottle_inventory(owner=args.owner)
    print(result)


def handle_get_full_bottle_pool_ids(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    result = contract.get_full_bottle_pool_ids()
    print(result)


def handle_get_full_bottle_prices(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    result = contract.get_full_bottle_prices()
    print(result)


def handle_get_full_bottle_supplies(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    result = contract.get_full_bottle_supplies()
    print(result)


def handle_get_terminus_address(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    result = contract.get_terminus_address()
    print(result)


def handle_get_unim_address(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    result = contract.get_unim_address()
    print(result)


def handle_get_volume_by_index(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    result = contract.get_volume_by_index(index=args.index)
    print(result)


def handle_on_erc1155_batch_received(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.on_erc1155_batch_received(
        arg1=args.arg1,
        arg2=args.arg2,
        arg3=args.arg3,
        arg4=args.arg4,
        arg5=args.arg5,
        transaction_config=transaction_config,
    )
    print(result)


def handle_on_erc1155_received(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.on_erc1155_received(
        arg1=args.arg1,
        arg2=args.arg2,
        arg3=args.arg3,
        arg4=args.arg4,
        arg5=args.arg5,
        transaction_config=transaction_config,
    )
    print(result)


def handle_set_bottle_capacities(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_bottle_capacities(
        new_bottle_capacities=args.new_bottle_capacities,
        transaction_config=transaction_config,
    )
    print(result)


def handle_set_empty_bottle_pool_ids(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_empty_bottle_pool_ids(
        new_empty_bottle_pool_ids=args.new_empty_bottle_pool_ids,
        transaction_config=transaction_config,
    )
    print(result)


def handle_set_full_bottle_pool_ids(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_full_bottle_pool_ids(
        new_full_bottle_pool_ids=args.new_full_bottle_pool_ids,
        transaction_config=transaction_config,
    )
    print(result)


def handle_set_full_bottle_prices(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_full_bottle_prices(
        prices=args.prices, transaction_config=transaction_config
    )
    print(result)


def handle_set_up(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_up(
        _unim_address=args.unim_address_arg,
        _terminus_address=args.terminus_address_arg,
        transaction_config=transaction_config,
    )
    print(result)


def handle_supports_interface(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    result = contract.supports_interface(interface_id=args.interface_id)
    print(result)


def handle_surrender_terminus_pools(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.surrender_terminus_pools(transaction_config=transaction_config)
    print(result)


def handle_withdraw_erc20(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = BottlerFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.withdraw_erc20(
        token_address=args.token_address,
        amount=args.amount,
        transaction_config=transaction_config,
    )
    print(result)


def generate_cli() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="CLI for BottlerFacet")
    parser.set_defaults(func=lambda _: parser.print_help())
    subcommands = parser.add_subparsers()

    deploy_parser = subcommands.add_parser("deploy")
    add_default_arguments(deploy_parser, True)
    deploy_parser.set_defaults(func=handle_deploy)

    verify_contract_parser = subcommands.add_parser("verify-contract")
    add_default_arguments(verify_contract_parser, False)
    verify_contract_parser.set_defaults(func=handle_verify_contract)

    add_terminus_pools_parser = subcommands.add_parser("add-terminus-pools")
    add_default_arguments(add_terminus_pools_parser, True)
    add_terminus_pools_parser.add_argument(
        "--full-bottle-pool-ids", required=True, help="Type: uint256[3]", nargs="+"
    )
    add_terminus_pools_parser.add_argument(
        "--empty-bottle-pool-ids", required=True, help="Type: uint256[3]", nargs="+"
    )
    add_terminus_pools_parser.set_defaults(func=handle_add_terminus_pools)

    bottler_controller_parser = subcommands.add_parser("bottler-controller")
    add_default_arguments(bottler_controller_parser, False)
    bottler_controller_parser.set_defaults(func=handle_bottler_controller)

    drain_erc20_parser = subcommands.add_parser("drain-erc20")
    add_default_arguments(drain_erc20_parser, True)
    drain_erc20_parser.add_argument(
        "--token-address", required=True, help="Type: address"
    )
    drain_erc20_parser.set_defaults(func=handle_drain_erc20)

    empty_bottles_parser = subcommands.add_parser("empty-bottles")
    add_default_arguments(empty_bottles_parser, True)
    empty_bottles_parser.add_argument(
        "--pool-index", required=True, help="Type: uint256", type=int
    )
    empty_bottles_parser.add_argument(
        "--bottles-count", required=True, help="Type: uint256", type=int
    )
    empty_bottles_parser.set_defaults(func=handle_empty_bottles)

    fill_bottles_parser = subcommands.add_parser("fill-bottles")
    add_default_arguments(fill_bottles_parser, True)
    fill_bottles_parser.add_argument(
        "--pool-index", required=True, help="Type: uint256", type=int
    )
    fill_bottles_parser.add_argument(
        "--bottles-count", required=True, help="Type: uint256", type=int
    )
    fill_bottles_parser.set_defaults(func=handle_fill_bottles)

    fill_empty_bottles_parser = subcommands.add_parser("fill-empty-bottles")
    add_default_arguments(fill_empty_bottles_parser, True)
    fill_empty_bottles_parser.add_argument(
        "--pool-index", required=True, help="Type: uint256", type=int
    )
    fill_empty_bottles_parser.add_argument(
        "--bottles-count", required=True, help="Type: uint256", type=int
    )
    fill_empty_bottles_parser.set_defaults(func=handle_fill_empty_bottles)

    get_bottle_capacities_parser = subcommands.add_parser("get-bottle-capacities")
    add_default_arguments(get_bottle_capacities_parser, False)
    get_bottle_capacities_parser.set_defaults(func=handle_get_bottle_capacities)

    get_empty_bottle_inventory_parser = subcommands.add_parser(
        "get-empty-bottle-inventory"
    )
    add_default_arguments(get_empty_bottle_inventory_parser, False)
    get_empty_bottle_inventory_parser.add_argument(
        "--owner", required=True, help="Type: address"
    )
    get_empty_bottle_inventory_parser.set_defaults(
        func=handle_get_empty_bottle_inventory
    )

    get_empty_bottle_pool_ids_parser = subcommands.add_parser(
        "get-empty-bottle-pool-ids"
    )
    add_default_arguments(get_empty_bottle_pool_ids_parser, False)
    get_empty_bottle_pool_ids_parser.set_defaults(func=handle_get_empty_bottle_pool_ids)

    get_empty_bottle_supplies_parser = subcommands.add_parser(
        "get-empty-bottle-supplies"
    )
    add_default_arguments(get_empty_bottle_supplies_parser, False)
    get_empty_bottle_supplies_parser.set_defaults(func=handle_get_empty_bottle_supplies)

    get_full_bottle_inventory_parser = subcommands.add_parser(
        "get-full-bottle-inventory"
    )
    add_default_arguments(get_full_bottle_inventory_parser, False)
    get_full_bottle_inventory_parser.add_argument(
        "--owner", required=True, help="Type: address"
    )
    get_full_bottle_inventory_parser.set_defaults(func=handle_get_full_bottle_inventory)

    get_full_bottle_pool_ids_parser = subcommands.add_parser("get-full-bottle-pool-ids")
    add_default_arguments(get_full_bottle_pool_ids_parser, False)
    get_full_bottle_pool_ids_parser.set_defaults(func=handle_get_full_bottle_pool_ids)

    get_full_bottle_prices_parser = subcommands.add_parser("get-full-bottle-prices")
    add_default_arguments(get_full_bottle_prices_parser, False)
    get_full_bottle_prices_parser.set_defaults(func=handle_get_full_bottle_prices)

    get_full_bottle_supplies_parser = subcommands.add_parser("get-full-bottle-supplies")
    add_default_arguments(get_full_bottle_supplies_parser, False)
    get_full_bottle_supplies_parser.set_defaults(func=handle_get_full_bottle_supplies)

    get_terminus_address_parser = subcommands.add_parser("get-terminus-address")
    add_default_arguments(get_terminus_address_parser, False)
    get_terminus_address_parser.set_defaults(func=handle_get_terminus_address)

    get_unim_address_parser = subcommands.add_parser("get-unim-address")
    add_default_arguments(get_unim_address_parser, False)
    get_unim_address_parser.set_defaults(func=handle_get_unim_address)

    get_volume_by_index_parser = subcommands.add_parser("get-volume-by-index")
    add_default_arguments(get_volume_by_index_parser, False)
    get_volume_by_index_parser.add_argument(
        "--index", required=True, help="Type: uint256", type=int
    )
    get_volume_by_index_parser.set_defaults(func=handle_get_volume_by_index)

    on_erc1155_batch_received_parser = subcommands.add_parser(
        "on-erc1155-batch-received"
    )
    add_default_arguments(on_erc1155_batch_received_parser, True)
    on_erc1155_batch_received_parser.add_argument(
        "--arg1", required=True, help="Type: address"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg2", required=True, help="Type: address"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg3", required=True, help="Type: uint256[]", nargs="+"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg4", required=True, help="Type: uint256[]", nargs="+"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg5", required=True, help="Type: bytes", type=bytes_argument_type
    )
    on_erc1155_batch_received_parser.set_defaults(func=handle_on_erc1155_batch_received)

    on_erc1155_received_parser = subcommands.add_parser("on-erc1155-received")
    add_default_arguments(on_erc1155_received_parser, True)
    on_erc1155_received_parser.add_argument(
        "--arg1", required=True, help="Type: address"
    )
    on_erc1155_received_parser.add_argument(
        "--arg2", required=True, help="Type: address"
    )
    on_erc1155_received_parser.add_argument(
        "--arg3", required=True, help="Type: uint256", type=int
    )
    on_erc1155_received_parser.add_argument(
        "--arg4", required=True, help="Type: uint256", type=int
    )
    on_erc1155_received_parser.add_argument(
        "--arg5", required=True, help="Type: bytes", type=bytes_argument_type
    )
    on_erc1155_received_parser.set_defaults(func=handle_on_erc1155_received)

    set_bottle_capacities_parser = subcommands.add_parser("set-bottle-capacities")
    add_default_arguments(set_bottle_capacities_parser, True)
    set_bottle_capacities_parser.add_argument(
        "--new-bottle-capacities", required=True, help="Type: uint256[3]", nargs="+"
    )
    set_bottle_capacities_parser.set_defaults(func=handle_set_bottle_capacities)

    set_empty_bottle_pool_ids_parser = subcommands.add_parser(
        "set-empty-bottle-pool-ids"
    )
    add_default_arguments(set_empty_bottle_pool_ids_parser, True)
    set_empty_bottle_pool_ids_parser.add_argument(
        "--new-empty-bottle-pool-ids", required=True, help="Type: uint256[3]", nargs="+"
    )
    set_empty_bottle_pool_ids_parser.set_defaults(func=handle_set_empty_bottle_pool_ids)

    set_full_bottle_pool_ids_parser = subcommands.add_parser("set-full-bottle-pool-ids")
    add_default_arguments(set_full_bottle_pool_ids_parser, True)
    set_full_bottle_pool_ids_parser.add_argument(
        "--new-full-bottle-pool-ids", required=True, help="Type: uint256[3]", nargs="+"
    )
    set_full_bottle_pool_ids_parser.set_defaults(func=handle_set_full_bottle_pool_ids)

    set_full_bottle_prices_parser = subcommands.add_parser("set-full-bottle-prices")
    add_default_arguments(set_full_bottle_prices_parser, True)
    set_full_bottle_prices_parser.add_argument(
        "--prices", required=True, help="Type: uint256[3]", nargs="+"
    )
    set_full_bottle_prices_parser.set_defaults(func=handle_set_full_bottle_prices)

    set_up_parser = subcommands.add_parser("set-up")
    add_default_arguments(set_up_parser, True)
    set_up_parser.add_argument(
        "--unim-address-arg", required=True, help="Type: address"
    )
    set_up_parser.add_argument(
        "--terminus-address-arg", required=True, help="Type: address"
    )
    set_up_parser.set_defaults(func=handle_set_up)

    supports_interface_parser = subcommands.add_parser("supports-interface")
    add_default_arguments(supports_interface_parser, False)
    supports_interface_parser.add_argument(
        "--interface-id", required=True, help="Type: bytes4", type=bytes_argument_type
    )
    supports_interface_parser.set_defaults(func=handle_supports_interface)

    surrender_terminus_pools_parser = subcommands.add_parser("surrender-terminus-pools")
    add_default_arguments(surrender_terminus_pools_parser, True)
    surrender_terminus_pools_parser.set_defaults(func=handle_surrender_terminus_pools)

    withdraw_erc20_parser = subcommands.add_parser("withdraw-erc20")
    add_default_arguments(withdraw_erc20_parser, True)
    withdraw_erc20_parser.add_argument(
        "--token-address", required=True, help="Type: address"
    )
    withdraw_erc20_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    withdraw_erc20_parser.set_defaults(func=handle_withdraw_erc20)

    return parser


def main() -> None:
    parser = generate_cli()
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
