# Code generated by moonworm : https://github.com/bugout-dev/moonworm
# Moonworm version : 0.1.12

import argparse
import json
import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from brownie import Contract, network, project
from brownie.network.contract import ContractContainer
from eth_typing.evm import ChecksumAddress


PROJECT_DIRECTORY = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
BUILD_DIRECTORY = os.path.join(PROJECT_DIRECTORY, "build", "contracts")


def boolean_argument_type(raw_value: str) -> bool:
    TRUE_VALUES = ["1", "t", "y", "true", "yes"]
    FALSE_VALUES = ["0", "f", "n", "false", "no"]

    if raw_value.lower() in TRUE_VALUES:
        return True
    elif raw_value.lower() in FALSE_VALUES:
        return False

    raise ValueError(
        f"Invalid boolean argument: {raw_value}. Value must be one of: {','.join(TRUE_VALUES + FALSE_VALUES)}"
    )


def bytes_argument_type(raw_value: str) -> bytes:
    return raw_value.encode()


def get_abi_json(abi_name: str) -> List[Dict[str, Any]]:
    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    abi_json = build.get("abi")
    if abi_json is None:
        raise ValueError(f"Could not find ABI definition in: {abi_full_path}")

    return abi_json


def contract_from_build(abi_name: str) -> ContractContainer:
    # This is workaround because brownie currently doesn't support loading the same project multiple
    # times. This causes problems when using multiple contracts from the same project in the same
    # python project.
    PROJECT = project.main.Project("moonworm", Path(PROJECT_DIRECTORY))

    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    return ContractContainer(PROJECT, build)


class UnimBottler:
    def __init__(self, contract_address: Optional[ChecksumAddress]):
        self.contract_name = "UnimBottler"
        self.address = contract_address
        self.contract = None
        self.abi = get_abi_json("UnimBottler")
        if self.address is not None:
            self.contract: Optional[Contract] = Contract.from_abi(
                self.contract_name, self.address, self.abi
            )

    def deploy(
        self,
        _unim_address: ChecksumAddress,
        _terminus_address: ChecksumAddress,
        transaction_config,
    ):
        contract_class = contract_from_build(self.contract_name)
        deployed_contract = contract_class.deploy(
            _unim_address, _terminus_address, transaction_config
        )
        self.address = deployed_contract.address
        self.contract = deployed_contract

    def assert_contract_is_instantiated(self) -> None:
        if self.contract is None:
            raise Exception("contract has not been instantiated")

    def unim_value_by_pool_id(self, arg1: int) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.UNIM_VALUE_BY_POOL_ID.call(arg1)

    def add_terminus_pool(
        self, _pool_id: int, bottle_volume: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.addTerminusPool(
            _pool_id, bottle_volume, transaction_config
        )

    def drain_erc20(self, token_address: ChecksumAddress, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.drainERC20(token_address, transaction_config)

    def empty_bottles(
        self, _pool_id: int, bottles_count: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.emptyBottles(_pool_id, bottles_count, transaction_config)

    def fill_bottles(
        self, _pool_id: int, bottles_count: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.fillBottles(_pool_id, bottles_count, transaction_config)

    def get_terminus_address(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getTerminusAddress.call()

    def get_terminus_pools(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getTerminusPools.call()

    def get_unim_address(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getUnimAddress.call()

    def owner(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.owner.call()

    def paused(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.paused.call()

    def renounce_ownership(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.renounceOwnership(transaction_config)

    def surrender_terminus_pools(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.surrenderTerminusPools(transaction_config)

    def transfer_ownership(self, new_owner: ChecksumAddress, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.transferOwnership(new_owner, transaction_config)

    def withdraw_erc20(
        self, token_address: ChecksumAddress, amount: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.withdrawERC20(token_address, amount, transaction_config)


def get_transaction_config(args: argparse.Namespace) -> Dict[str, Any]:
    signer = network.accounts.load(args.sender, args.password)
    transaction_config: Dict[str, Any] = {"from": signer}
    if args.gas_price is not None:
        transaction_config["gas_price"] = args.gas_price
    if args.confirmations is not None:
        transaction_config["required_confs"] = args.confirmations
    if args.nonce is not None:
        transaction_config["nonce"] = args.nonce
    return transaction_config


def add_default_arguments(parser: argparse.ArgumentParser, transact: bool) -> None:
    parser.add_argument(
        "--network", required=True, help="Name of brownie network to connect to"
    )
    parser.add_argument(
        "--address", required=False, help="Address of deployed contract to connect to"
    )
    if not transact:
        return
    parser.add_argument(
        "--sender", required=True, help="Path to keystore file for transaction sender"
    )
    parser.add_argument(
        "--password",
        required=False,
        help="Password to keystore file (if you do not provide it, you will be prompted for it)",
    )
    parser.add_argument(
        "--gas-price", default=None, help="Gas price at which to submit transaction"
    )
    parser.add_argument(
        "--confirmations",
        type=int,
        default=None,
        help="Number of confirmations to await before considering a transaction completed",
    )
    parser.add_argument(
        "--nonce", type=int, default=None, help="Nonce for the transaction (optional)"
    )


def handle_deploy(args: argparse.Namespace) -> None:
    network.connect(args.network)
    transaction_config = get_transaction_config(args)
    contract = UnimBottler(None)
    result = contract.deploy(
        _unim_address=args.unim_address_arg,
        _terminus_address=args.terminus_address_arg,
        transaction_config=transaction_config,
    )
    print(result)


def handle_unim_value_by_pool_id(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = UnimBottler(args.address)
    result = contract.unim_value_by_pool_id(arg1=args.arg1)
    print(result)


def handle_add_terminus_pool(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = UnimBottler(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.add_terminus_pool(
        _pool_id=args.pool_id_arg,
        bottle_volume=args.bottle_volume,
        transaction_config=transaction_config,
    )
    print(result)


def handle_drain_erc20(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = UnimBottler(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.drain_erc20(
        token_address=args.token_address, transaction_config=transaction_config
    )
    print(result)


def handle_empty_bottles(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = UnimBottler(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.empty_bottles(
        _pool_id=args.pool_id_arg,
        bottles_count=args.bottles_count,
        transaction_config=transaction_config,
    )
    print(result)


def handle_fill_bottles(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = UnimBottler(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.fill_bottles(
        _pool_id=args.pool_id_arg,
        bottles_count=args.bottles_count,
        transaction_config=transaction_config,
    )
    print(result)


def handle_get_terminus_address(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = UnimBottler(args.address)
    result = contract.get_terminus_address()
    print(result)


def handle_get_terminus_pools(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = UnimBottler(args.address)
    result = contract.get_terminus_pools()
    print(result)


def handle_get_unim_address(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = UnimBottler(args.address)
    result = contract.get_unim_address()
    print(result)


def handle_owner(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = UnimBottler(args.address)
    result = contract.owner()
    print(result)


def handle_paused(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = UnimBottler(args.address)
    result = contract.paused()
    print(result)


def handle_renounce_ownership(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = UnimBottler(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.renounce_ownership(transaction_config=transaction_config)
    print(result)


def handle_surrender_terminus_pools(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = UnimBottler(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.surrender_terminus_pools(transaction_config=transaction_config)
    print(result)


def handle_transfer_ownership(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = UnimBottler(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.transfer_ownership(
        new_owner=args.new_owner, transaction_config=transaction_config
    )
    print(result)


def handle_withdraw_erc20(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = UnimBottler(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.withdraw_erc20(
        token_address=args.token_address,
        amount=args.amount,
        transaction_config=transaction_config,
    )
    print(result)


def generate_cli() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="CLI for UnimBottler")
    parser.set_defaults(func=lambda _: parser.print_help())
    subcommands = parser.add_subparsers()

    deploy_parser = subcommands.add_parser("deploy")
    add_default_arguments(deploy_parser, True)
    deploy_parser.add_argument(
        "--unim-address-arg", required=True, help="Type: address"
    )
    deploy_parser.add_argument(
        "--terminus-address-arg", required=True, help="Type: address"
    )
    deploy_parser.set_defaults(func=handle_deploy)

    unim_value_by_pool_id_parser = subcommands.add_parser("unim-value-by-pool-id")
    add_default_arguments(unim_value_by_pool_id_parser, False)
    unim_value_by_pool_id_parser.add_argument(
        "--arg1", required=True, help="Type: uint256", type=int
    )
    unim_value_by_pool_id_parser.set_defaults(func=handle_unim_value_by_pool_id)

    add_terminus_pool_parser = subcommands.add_parser("add-terminus-pool")
    add_default_arguments(add_terminus_pool_parser, True)
    add_terminus_pool_parser.add_argument(
        "--pool-id-arg", required=True, help="Type: uint256", type=int
    )
    add_terminus_pool_parser.add_argument(
        "--bottle-volume", required=True, help="Type: uint256", type=int
    )
    add_terminus_pool_parser.set_defaults(func=handle_add_terminus_pool)

    drain_erc20_parser = subcommands.add_parser("drain-erc20")
    add_default_arguments(drain_erc20_parser, True)
    drain_erc20_parser.add_argument(
        "--token-address", required=True, help="Type: address"
    )
    drain_erc20_parser.set_defaults(func=handle_drain_erc20)

    empty_bottles_parser = subcommands.add_parser("empty-bottles")
    add_default_arguments(empty_bottles_parser, True)
    empty_bottles_parser.add_argument(
        "--pool-id-arg", required=True, help="Type: uint256", type=int
    )
    empty_bottles_parser.add_argument(
        "--bottles-count", required=True, help="Type: uint256", type=int
    )
    empty_bottles_parser.set_defaults(func=handle_empty_bottles)

    fill_bottles_parser = subcommands.add_parser("fill-bottles")
    add_default_arguments(fill_bottles_parser, True)
    fill_bottles_parser.add_argument(
        "--pool-id-arg", required=True, help="Type: uint256", type=int
    )
    fill_bottles_parser.add_argument(
        "--bottles-count", required=True, help="Type: uint256", type=int
    )
    fill_bottles_parser.set_defaults(func=handle_fill_bottles)

    get_terminus_address_parser = subcommands.add_parser("get-terminus-address")
    add_default_arguments(get_terminus_address_parser, False)
    get_terminus_address_parser.set_defaults(func=handle_get_terminus_address)

    get_terminus_pools_parser = subcommands.add_parser("get-terminus-pools")
    add_default_arguments(get_terminus_pools_parser, False)
    get_terminus_pools_parser.set_defaults(func=handle_get_terminus_pools)

    get_unim_address_parser = subcommands.add_parser("get-unim-address")
    add_default_arguments(get_unim_address_parser, False)
    get_unim_address_parser.set_defaults(func=handle_get_unim_address)

    owner_parser = subcommands.add_parser("owner")
    add_default_arguments(owner_parser, False)
    owner_parser.set_defaults(func=handle_owner)

    paused_parser = subcommands.add_parser("paused")
    add_default_arguments(paused_parser, False)
    paused_parser.set_defaults(func=handle_paused)

    renounce_ownership_parser = subcommands.add_parser("renounce-ownership")
    add_default_arguments(renounce_ownership_parser, True)
    renounce_ownership_parser.set_defaults(func=handle_renounce_ownership)

    surrender_terminus_pools_parser = subcommands.add_parser("surrender-terminus-pools")
    add_default_arguments(surrender_terminus_pools_parser, True)
    surrender_terminus_pools_parser.set_defaults(func=handle_surrender_terminus_pools)

    transfer_ownership_parser = subcommands.add_parser("transfer-ownership")
    add_default_arguments(transfer_ownership_parser, True)
    transfer_ownership_parser.add_argument(
        "--new-owner", required=True, help="Type: address"
    )
    transfer_ownership_parser.set_defaults(func=handle_transfer_ownership)

    withdraw_erc20_parser = subcommands.add_parser("withdraw-erc20")
    add_default_arguments(withdraw_erc20_parser, True)
    withdraw_erc20_parser.add_argument(
        "--token-address", required=True, help="Type: address"
    )
    withdraw_erc20_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    withdraw_erc20_parser.set_defaults(func=handle_withdraw_erc20)

    return parser


def main() -> None:
    parser = generate_cli()
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
